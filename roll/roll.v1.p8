pico-8 cartridge // http://www.pico-8.com
version 27
__lua__
--rolltris
--by thomas michael wallace

shapes={
 { --short l
	 {1,0},
	 {1,1},
 },{ --[]
  {1},
 },{ --lowercase t
	 {1,0},
	 {1,1},
	 {1,0},
	},{ --z
	 {0,1,1},
 	{1,1,0},
 },{ --_
  {1,1,1,1},
 },{ --l
  {1,0},
  {1,0},
  {1,1},
 },{ --[]
  {1,1},
  {1,1},
 },{ --[]_
  {1,1,0},
  {1,1,1},
 },{ --x
  {1,0,1},
  {0,1,0},
  {1,0,1},
 },{ --.\ wedge
  {1,0,0},
  {1,1,0},
  {1,1,1},
 },{ --.--- long l
  {1,1,1,1},
  {1,0,0,0},
 },{ --gaint l
  {1,1,1,1},
  {1,0,0,0},
  {1,0,0,0},
 }
}

debug={}
-->8
--v3

--m:matrix
--cw:clockwise
function rotate_matrix(m,cw)
 local rm={}--rotated matrix
 local h=#m--ori. height
 local w=#m[1]--o/width
 for r=1,h do
	 for c=1,w do
	  --anti-c/wise
	  local tc=r--target col
	  local tr=w-c+1--target row
	  --c/wise
	  if(cw)tc=h-r+1
	  if(cw)tr=c
	  if(not rm[tr])rm[tr]={}
	  rm[tr][tc]=m[r][c]
  end
	end
	return rm
end

--m:matrix
--px:pivot about px(0 left)
--py:pa/y(0 top)
--cw:clockwise
function rotate_point(m,px,py,cw)
 local dx,dy
 if(cw)then
  local h=#m--height
	 local vx=-px--vec bl.o-x
	 local vy=h-py--v/bot/l-y
	 local rx=-vy--rot vec 90
	 local ry=vx--rot vec 90
		dx=px+rx--new tl x
	 dy=py+ry--new tl y
	else
	 local w=#m[1]--width
	 local vx=w-px--vec tr.o-x
	 local vy=-py
	 local rx=vy--rot vec 90
	 local ry=-vx--rot vec 90
	 dx=px+rx
	 dy=py+ry
	end
 return {dx=dx,dy=dy}
end

--b:blocks as {m,cx,cy,o}
--px:pivot about px(0 left)
--py:pa/y(0 top)
--cw:clockwise
function pivot_blocks(b,px,py,cw)
 local d=rotate_point(b.m,px,py,cw)
 local m=rotate_matrix(b.m,cw)
 if(cw)b.o+=1 else b.o-=1
 b.o%=4
 b.m=m
 b.cx+=d.dx
 b.cy+=d.dy
end

--m:matrix
--cx/y:top-left draw cell
--o:0-3:clockwise rotations
function _draw_blocks(b)
 local fx=false--flip x
 local fy=false--f/y
 if(b.o==2 or b.o==3)fy=true
 if(b.o==1 or b.o==2)fx=true
 local ox=b.cx*8--origin x
 local oy=b.cy*8--o/y
	for r=1,#b.m do
	 for c=1,#b.m[r] do
	  local f=b.m[r][c]--draw flag
	  local x=(c-1)*8+ox--drw x
	  local y=(r-1)*8+oy--d/y
	  if(f==1)then
	   spr(1,x,y,1,1,fx,fy)
	  else
	   spr(3,x,y,1,1,fx,fy)
	  end
	 end
 end
end

function is_solid(mx,my)
 local s=mget(mx+level.lx,my+level.ly)
 return fget(s,0)
end

--b:blocks as {m}
function is_support(b)
 for r=#b.m,1,-1 do
  for c=1,#b.m[1] do
   local f=b.m[r][c]--draw flag
   if(f==1)then
    local mx=b.cx+(c-1)
    local my=b.cy+r
    if(is_solid(mx,my))return true
   end
  end
 end
 return false
end

--b:blocks as {m,cy}
function fall(b)
 if(is_support(b))then
  b.f=false
 else
  b.cy+=1
  b.f=true
 end
end

--b:blocks as {m}
--cw:clockwise
function get_edge(b,cw)
 local w=#b.m[1]
 local h=#b.m
 --get top left/right point
 local px=0--pivot x
 local c0=cw and 1 or w
 local cl=cw and w or 1
 local cs=cw and 1 or -1
 for c=c0,cl,cs do
  local f=b.m[1][c]
  if(f==1)px=c
 end
 if(not cw)px-=1--lhs.
 local py=0--pivot y

 local rs,cs,ds
 if(cw)then
  --c/w:➡️⬇️⬅️⬆️
		rs={0,1,1,0,0}
		cs={1,1,0,0,1}
 	ds={{1,0},{0,1},{-1,0},{0,-1}}
 else
  --a.a/w:⬅️⬇️➡️⬆️
  rs={0,1,1,0,0}
  cs={0,0,1,1,0}
  ds={{-1,0},{0,1},{1,0},{0,-1}}
 end
 
 local e={{px,py}}
 local ei=1
 repeat
  ei+=1
 	local f={}--[a]c/w filled
 	for i=1,#rs do
 	 local br=py+rs[i]
 	 local bc=px+cs[i]
 	 local bf=0--block flag
 	 if(br>0 and br<=h
 	   and bc>0 and bc<=w)then
 	  bf=b.m[br][bc]
 	 end
 	 f[i]=bf
 	end

 	local di=1--delta direction
 	for i=4,1,-1 do
 	 if(f[i]==0 and f[i+1]==1)di=i
 	end
 	
 	px+=ds[di][1]
 	py+=ds[di][2]
 	e[ei]={px,py}

 until py==0 --return to top
 return e
end

--b:blocks as {m}
--cw:clockwise
function get_pivot_point(b,cw)
 local e=get_edge(b,cw)
 
 local rs,cs
 if(cw)then
  --c/w:➡️⬇️⬅️⬆️
		rs={1,1}
		cs={1,0}
 else
  --a.a/w:⬅️⬇️➡️⬆️
  rs={1,1}
  cs={0,1}
 end

 for en=1,#e do
  local ep=e[en]
 	for i=1,#rs do
   local mx=b.cx+ep[1]+cs[i]
   local my=b.cy+ep[2]+rs[i]
   if(is_solid(mx-1,my-1))then
    return {
     px=ep[1],
     py=ep[2],
     e=e,
     en=en,
    }
   end
  end
 end
end

function get_pivot(b,cw,dn)
 local p=get_pivot_point(b,cw)
 if(dn<0)then
  p.px=p.e[p.en+dn][1]
  p.py=p.e[p.en+dn][2]
 end
 
 local w=#b.m[1]
 local h=#b.m

 local g=false --pp on ground
 local gmx=b.cx+p.px-1
 local gmy=b.cy+p.py
 if(not cw)gmx-=1
 if(is_solid(gmx,gmy))g=true
 
 local bx=0--lift from p.
 local by=0--l/f protrusion
 if(g)then
  if(cw)then	 	
			bx=max(0,w-(p.px+1))
			by=-(w-p.px)
	 else
	  bx=-max(0,p.px-1)
		 by=-p.px
		end
 end
  
 --todo:no leap/fall on prot.
 return {
  px=p.px,
  py=p.py,
  by=by,
  bx=bx,
  en=p.en,
 }
end

function is_collide(b)
 for r=1,#b.m do
  for c=1,#b.m[r] do
   local f=b.m[r][c]
   if(f==1)then
    local mx=b.cx+c-1
    local my=b.cy+r-1
    if(is_solid(mx,my))return true
   end
  end
 end
 return false
end

function move(b,cw)
 local dn=0
 local c=false
 repeat
  p=get_pivot(b,cw,dn)
 	if(p.en+dn<2)then
	  return
	 end
	 local o={
	  m=b.m,
	  cx=b.cx,
	  cy=b.cy,
	 }
	 dn-=1
	 pivot_blocks(b,p.px,p.py,cw)
		b.cy+=p.by
		b.cx+=p.bx
		c=is_collide(b)
		if(c)then
		 b.m=o.m
   b.cx=o.cx
   b.cy=o.cy
		end
	until(c==false)
	
	fall(b)
end

function is_block(b,r,c)
 if(r<1 or r>#b.m)return false
 if(c<1 or c>#b.m[r])return false
 local f=b.m[r][c]
 if(f==1)return true
 return false
end

function join_matrix(b,js)
 local h=#b.m
 local w=#b.m[1]
 --a:trbl
 local a={false,false,false,false}--tlbr
 for j in all(js) do--r;c
  if(j[1]==0)a[1]=true
  if(j[2]==w+1)a[2]=true
  if(j[1]==h+1)a[3]=true
  if(j[2]==0)a[4]=true
 end
 debug.tl=tostringl(a)

 local jm={}
 local odr=0
 local odc=0
 local jdr=0
 local jdc=0
 if(a[1])then--top
  b.cy-=1
  h+=1
  odr+=1
 else
  jdr-=1
 end
 if(a[2]) w+=1--right
 if(a[3]) h+=1--bottom
 if(a[4])then--left
  b.cx-=1
  w+=1
  odc-=1
 else
  jdc-=1
 end
 debug.t2=w
 debug.t3=dc
 for r=1,h do
  jm[r]={}
  for c=1,w do
   jm[r][c]=0
   if(is_block(b,r+odr,c+odc))then
    jm[r][c]=1
   end
  end
 end
 
 for j in all(js) do
  local r=j[1]+1+jdr
  local c=j[2]+1+jdc
  jm[r][c]=1
 end
 b.m=jm
end

function is_join(mx,my)
 local s=mget(mx+level.lx,my+level.ly)
 local j=fget(s,1)
 return j
end

function join(b)
 local js={}--blocks to join
 for r=0,#b.m+1 do
  for c=0,#b.m[1]+1 do
   local mx=b.cx+c-1
   local my=b.cy+r-1
   local j=is_join(mx,my)
   if(j)then
    j=false
    --add to top
    if(is_block(b,r+1,c))j=true
    if(is_block(b,r,c+1))j=true
    if(is_block(b,r-1,c))j=true
    if(is_block(b,r,c-1))j=true
    if(j)then
     js[#js+1]={r,c}
     mset(mx+level.lx,my+level.ly,0)
    end
   end
  end
 end
 if(#js==0)return
 if(debug.t1==nil)debug.t1=tostring(js)
 join_matrix(b,js)
 --join(b)
end

function clear(b)
 debug.t1=false
 debug.t2=false
 debug.t3=false
 debug.t4=false
 --across
 for r=1,#b.m do
  local l=0
  for c=1,#b.m[r] do
   local f=b.m[r][c]
   l+=f
  end
  local my=b.cy+r-1
  for mx=0,16 do
   local s=mget(mx+level.lx,my+level.ly)
   if(fget(s,2))l+=1
  end
  if(l==16)then
   clear_hline(my+level.y)
   clear_m(b,r,0)
  end
 end
 --down
 for c=1,#b.m[1] do
  local l=0
  for r=1,#b.m do
   local f=b.m[r][c]
   l+=f
  end
  local mx=b.cx+c-1
  for my=0,16 do
   local s=mget(mx+level.lx,my+level.ly)
   if(fget(s,2))l+=1
  end
  if(l==16)then
   clear_vline(mx+level.lx)
   clear_m(b,0,c)
  end
 end
end


function clear_hline(my)
 for mx=level.lx,level.lx+16 do
  local s=mget(mx,my)
  if(fget(s,2))then
   mset(mx,my,0)
  end
 end
end
function clear_vline(mx)
 for my=level.ly,level.ly+16 do
  local s=mget(mx,my)
  if(fget(s,2))then
   mset(mx,my,0)
  end
 end
end

function clear_m(b,cr,cc)
 local m={}
-- todo: re-enable central
-- for r=1,#b.m do
--  m[r]={}
--  for c=1,#b.m[r] do
--   local f=0
--   if(c~=cc and r~=rc)then
--    f=b.m[r][c]    
--   end
--   m[r][c]=f
--  end
-- end
 local dr=0
 local dc=0
 if(cr==1)dr=1
 if(cc==1)dc=1
 local h=#b.m
 local w=#b.m[1]
 if(cr>0)h-=1
 if(cc>0)w-=1
 for r=1,h do
  m[r]={}
  for c=1,w do
   m[r][c]=b.m[r+dr][c+dc]
  end
 end 
 b.m=m
 b.cx+=dc
 b.cy+=dr
end
-->8
test={
 b={
		m=shapes[2],--shape
		o=0,--oritent
		cx=4,--top-left cell x
		cy=2,--tlc/y
		f=true,--falling
	}
}

function _init()
 test.b.m=level.s
 test.b.cy=2
 test.b.cx=4
 test.b.f=false
 test.b.o=0
end

function _update()
 if(btnp(4))then
  level.lx+=16
  level.s=shapes[3]
  _init()
  return
 end

 fall(test.b)
 if(not test.b.f)then
	 if(btnp(0) or btnp(1))then
			move(test.b,btnp(1))
	 end
	end
	join(test.b)
	clear(test.b)
end

level={
 lx=0,
 ly=0,
 s=shapes[2]
}

function _draw()
 cls()
 map(level.lx,level.ly,0,0,16,16)
	_draw_blocks(test.b)
 print(debug.t1,0,0,3)
 print(debug.t2,32,0,4)
 print(debug.t3,64,0,5)
 print(debug.t4,96,0,6)
 print(debug.tl,0,8,14)
end

-->8
 	

-- converts anything to string, even nested tables
function tostring(t)
 local s=""
 for r=1,#t do
  s=s.."["
  for c=1,#t[r] do
   s=s..t[r][c]
   if(c<#t[r])s=s..","
  end
  s=s.."]"
 end
 return s
end

function tostringl(t)
 local s="["
  for c=1,#t do
   s=s..tostr(t[c])
   if(c<#t)s=s..","
  end
 return s.."]"
end

__gfx__
00000000033333300999999000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000033bbbb3399aaaa9900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
007007003bb333339aa9999900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000770003b3333339a99999900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000770003b3333339a99999900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
007007003b3333339a99999900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000333333339999999900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000033333300999999000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000055555500566556000000000000000005555555555555555555555550000000000000000000000000000000000000000000000000000000000000000
00000000550005555577006600000000000000005000000000000000000000050000000000000000000000000000000000000000000000000000000000000000
00000000500555556700770500000000000000005066666666666666666666050000000000000000000000000000000000000000000000000000000000000000
00000000505555556700770500000000000000005065555555555555555556050000000000000000000000000000000000000000000000000000000000000000
00000000505555555077007600000000000000005065000000000000000056050000000000000000000000000000000000000000000000000000000000000000
00000000555555555077007600000000000000005065000000000000000056050000000000000000000000000000000000000000000000000000000000000000
00000000555555556600775500000000000000005065000000000000000056050000000000000000000000000000000000000000000000000000000000000000
00000000055555500655665000000000000000005065000000000000000056050000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000005065000000000000000056050000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000005065000000000000000056050000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000005065000000000000000056050000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000005065000000000000000056050000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000005065000000000000000056050000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000005065000000000000000056050000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000005065000000000000000056050000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000005065000000000000000056050000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000005065000000000000000056050000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000065000000000000000056000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000006665000000000000000056660000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000005555000000000000000055550000000000000000000000000000000000000000000000000000000000000000
__gff__
0000070000000000000000000000000000050900000101010000000000000000000000000001000100000000000000000000000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1111111111111111111111111111111100000000000000000000110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000011111111111100000000000000000000000000110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000001111111100000011111100000000111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000017000000000000000000110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1617000000000000000000000000000027000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0027000000000000000000000000000027000000000000000000110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0027000000000000000000000000000027020000000000111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0027020000000000151612121216170037161616161711111111111111121217000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0037161616161616350011111111270000000000001111111111111111111127000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000001111111100270000000000000011111111111111000027000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000001111110000371600000000000000001111111100000027000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000001111000000000000000000000000000000110000000027000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000011000000000000000000000000000000110000000037000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000011000000000000000000000000000000110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
