pico-8 cartridge // http://www.pico-8.com
version 27
__lua__
--rolltris
--by thomas michael wallace

function rot_shaped(s)
 local m={}
 local ys=#s
 local xs=#s[1]
 for y=1,ys do
	 for x=1,xs do
	  if(not m[x])m[x]={}
	  m[x][ys-y+1]=s[y][x]
  end
	end
	return m
end

function dx_shape(s)
	local dx=0
	local ey=#s
	for x=1,#s[1] do
	 if(x%3==0)ey=max(1,ey-1)
	 for y=ey,#s do
 	 if(s[y][x]==1)then
	   local ex=x-(#s-y)
	   dx=max(dx,ex)
	  end
	 end
	end
	return dx
end

function gen_shape(s)
 local m={}
 local dx={}
 local dy={}
 for n=1,4 do
  if(n==1)then
   m[n]=s
  else
   m[n]=rot_shaped(m[n-1])
  end
  dx[n]=dx_shape(m[n])
  dy[n]=#m[n]-#m[n][1]
 end
 return {
  s=s,
  m=m,
  dx=dx,
  dy=dy,
 }
end

shapes={
 { --short l
	 {1,0},
	 {1,1},
 },{ --[]
  {1},
 },{ --lowercase t
	 {1,0},
	 {1,1},
	 {1,0},
	},{ --z
	 {0,1,1},
 	{1,1,0},
 },{ --_
  {1,1,1,1},
 },{ --l
  {1,0},
  {1,0},
  {1,1},
 },{ --[]
  {1,1},
  {1,1},
 },{ --[]_
  {1,1,0},
  {1,1,1},
 },{ --x
  {1,0,1},
  {0,1,0},
  {1,0,1},
 },{ --.\ wedge
  {1,0,0},
  {1,1,0},
  {1,1,1},
 },{ --.--- long l
  {1,1,1,1},
  {1,0,0,0},
 },{ --gaint l
  {1,1,1,1},
  {1,0,0,0},
  {1,0,0,0},
 }
}

state={
 c=1,
 n=1,
 cx=0,
 cy=1,
 r=0,
 f=8,
 e=6,
 g=false,
}

function _init()
 --reset
 state.n=1
 state.r=0
 --build
 state.s=shapes[state.c]
 local p=gen_shape(state.s)
 state.m=p.m
 state.dx=p.dx
 state.dy=p.dy
 state.cy=state.f-#state.s
end

function will_col()
 local n=state.n
 local cx=state.cx+state.dx[n]
 local cy=state.cy+state.dy[n]
 n+=1
 if(n>4)n=1
 local s=state.m[n]
 for y=#s,1,-1 do
  for x=1,#s[y] do
   if(s[y][x]==1)then
    local m=mget(cx+x-1,cy+y-1)
    if(m==17)return true
   end
  end
 end
 return false
end

function _move_right()
 if(will_col())then
 	--at edge
 	local dp=state.dx[state.n]-1
 	if(dp<1)return --can't
 	state.cx-=1
 	state.cy-=1
 end
 state.cx+=state.dx[state.n]
 state.cy+=state.dy[state.n]
	state.n+=1
	if(state.n>4)state.n=1
	state.r+=90
	state.r%=360
end

function should_fall()
 local s=state.m[state.n]
 for y=#s,1,-1 do
  for x=1,#s[y] do
   if(s[y][x]==1)then
    local m=mget(state.cx+x-1,state.cy+y)
    if(m==17)return false
   end
  end
 end
 return true
end

function _old_update()
 if(should_fall())then
  if(not state.g)state.cx+=1
  state.g=true
 	state.cy+=1
 elseif(btnp(1))then
  _move_right()
 elseif(btnp(0))then
  state.n-=1
  if(state.n<1)state.n=4
  state.cx-=state.dx[state.n]
  state.cy-=state.dy[state.n]
  state.r-=90
  state.r%=360
 elseif(btnp(5))then
 	state.c+=1
 	if(state.c>#shapes)state.c=1
 	_init()
 elseif(btnp(4))then
 	state.c-=1
 	if(state.c<1)state.c=#shapes
 	_init()
 end
end


function _draw_block(cx,cy,r)
 local d=8
 local fx=false
 local fy=false
 if(r==90 or r==180)fx=true
 if(r==180 or r==270)fy=true
	spr(1,cx*d,cy*d,1,1,fx,fy)
end

function _draw_blocks(m,ox,oy,rot)
 local x=ox
 local y=oy
	for r in all(m)do
		for f in all(r)do
			if(f==1)_draw_block(x,y,rot)
			x+=1
		end
		x=ox
		y+=1
	end
end

function _old_draw()
 cls()
 map(0,0,0,0,16,16)
 _draw_blocks(state.m[state.n],state.cx,state.cy)
	print(state.g)
end


-->8
--shape

debug={
 i=1,
 cx=2,
 cy=6,
 t1=false,
 t2=false,
 r=0,
}

function _init()
	debug.s=shapes[debug.i]
	local t=#debug.s
	debug.cy=10-t
end

function _update()
 if(btnp(4))then
  debug.i-=1
  if(debug.i<1)debug.i=#shapes
  _init()
 elseif(btnp(5))then
 	debug.i+=1
  if(debug.i>#shapes)debug.i=1
  _init()
 end
 
 local cw=false
	if(btnp(1))cw=true
 if(btnp(0) or btnp(1))then
  local p=get_pivot(debug.s,cw)
 	local r=rot_about(debug.s,p.r,p.c,p.cw)
 	debug.s=r.m
 	debug.cx+=r.dx
 	debug.cy+=r.dy
 	debug.r-=90
 	if(cw)debug.r+=180
 	debug.r%=360
 end
end

function rot_matrix_90(m,cw)
 local r={}--rotated matrix
 local h=#m--ori. height
 local w=#m[1]--o/width
 for ro=1,h do--o/row
	 for co=1,w do--o/col
	  --anti-c/wise
	  local ct=ro--target col
	  local rt=w-co+1--target row
	  --c/wise
	  if(cw)ct=h-ro+1
	  if(cw)rt=co
	  if(not r[rt])r[rt]={}
	  r[rt][ct]=m[ro][co]
  end
	end
	return r
end

function rot_about(m,r,c,cw)
 local rt={}
 local h=#m
 local w=#m[1]
 rt.m=rot_matrix_90(m,cw)
 if(cw)then
  rt.dx=c
  rt.dy=h-w-(r-1)
 else
  rt.dx=-h+(c-1)
  rt.dy=h-w-(r-1)
 end
 return rt
end

function get_pivot_cw(m,p,w,h)
 local rcm=1--row with c/max
 local rl=h
 local mx=debug.cx+w
 local my=debug.cy
 for r=h,1,-1 do
  local s=mget(mx,my+r)
  if(s==17)rl=min(r-1,rl)
 end
 p.r=(h-rl)+1

 mx=debug.cx-1
 my=debug.cy+h+1
 local cl=w
 for c=1,w do
  local s=mget(mx+c,my)
  if(s~=17)cl=min(c-1,cl)
 end
 debug.t1=mx
 debug.t2=my
 debug.t3=cl

 local c_max=0
 for r=rl,1,-1 do
  for c=w,1,-1 do
   if(m[r][c]==1)then
    if(c>c_max)then
     c_max=c
     rcm=r
    end
   end
  end
 	p.c=w-(h-rcm)
 end
 if(cl<w)then
  p.r-=1
  p.c=min(p.c,cl)
 end
 debug.t4=p.c
end

function get_pivot(m,cw)
 local p={cw=cw}
 local w=#m[1]
 local h=#m
 if(cw)then
  get_pivot_cw(m,p,w,h)
 else
  local rcm=w--row with c/max
  local c_min=w+1
  for r=h,1,-1 do
	  for c=1,w do
	   if(m[r][c]==1)then
	    if(c<c_min)then
	     c_min=c
	     rcm=r
	    end
	   end
	  end
	 	p.r=1
	 	p.c=min(h-rcm+1,w)
	 end
 end
 return p
end

function _draw()
 cls()
	_draw_blocks(debug.s,debug.cx,debug.cy,debug.r)
 map(0,0,0,-8,16,16)
 print(debug.t1,0,0,3)
 print(debug.t2,32,0,4)
 print(debug.t3,64,0,5)
 print(debug.t4,96,0,6)
end

-->8

__gfx__
00000000033333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000033bbbb330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
007007003bb333330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000770003b3333330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000770003b3333330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
007007003b3333330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000333333330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000033333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000055555500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000550005550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000500555550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000505555550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000505555560000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000555555560000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000555555660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000055566600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
